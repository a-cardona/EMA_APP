names(all_data)[names(all_data) == pid_name] <- "PID"
} else {
stop("❌ Could not find a PID column in the data.")
}
source("ema_explorer.R", echo = TRUE)
print(
ggplot(df, aes(x = .data[[mood_col]])) +
geom_histogram(bins = 10, fill = "#D34B87", color = "white") +
labs(title = "Mood Distribution", x = "Mood", y = "Frequency")
)
source("ema_explorer.R", echo = TRUE)
source("ema_explorer.R", echo = TRUE)
source("ema_explorer.R", echo = TRUE)
# 📁 Set your data directory
data_dir <- "/Users/andrewcardona/Desktop/CABLAB_CODE/EMA"
file_paths <- list.files(data_dir, pattern = "^cleaned_EMA.*\\.csv$", full.names = TRUE)
# 📦 Load required packages
library(tidyverse)
# 🪄 Load and combine all data
cat("🔄 Loading all EMA files...\n")
all_data <- file_paths %>%
map_dfr(read_csv, .id = "file_index")
## ✅ Standardize PID column name if needed
pid_name <- names(all_data)[str_detect(names(all_data), regex("^pid$", ignore_case = TRUE))]
if (length(pid_name) == 1) {
names(all_data)[names(all_data) == pid_name] <- "PID"
} else {
stop("❌ Could not find a PID column in the data.")
}
names(read_csv(file_paths[1], show_col_types = FALSE))
# 🔍 Choose subset of data based on platform
if (platform_choice != "all") {
reason_cols <- df %>% select(starts_with(paste0(platform_choice, "_"))) %>%
select(-matches("cont_|act_")) %>% colnames()
content_cols <- df %>% select(starts_with(paste0(platform_choice, "_cont_"))) %>% colnames()
activity_cols <- df %>% select(starts_with(paste0(platform_choice, "_act_"))) %>% colnames()
mood_col <- paste0(platform_choice, "_mood")
mins_col <- paste0(platform_choice, "_mins")
} else {
reason_cols <- grep("_$", colnames(df), value = TRUE)
content_cols <- grep("_cont_", colnames(df), value = TRUE)
activity_cols <- grep("_act_", colnames(df), value = TRUE)
mood_col <- grep("_mood$", colnames(df), value = TRUE)
mins_col <- grep("_mins$", colnames(df), value = TRUE)
}
source("ema_explorer.R", echo = TRUE)
source("ema_explorer.R", echo = TRUE)
hi
insta
source("~/.active-rstudio-document", echo=TRUE)
3
exit
# 📁 Set your data directory
data_dir <- "/Users/andrewcardona/Desktop/CABLAB_CODE/EMA"
file_paths <- list.files(data_dir, pattern = "^cleaned_EMA.*\\.csv$", full.names = TRUE)
# 📦 Load required packages
library(tidyverse)
# 🪄 Load and combine all data
cat("🔄 Loading all EMA files...\n")
all_data <- file_paths %>%
map_dfr(read_csv, .id = "file_index")
# 🧠 Define platform list and mapping structure
platforms <- c("insta", "x", "fb", "snapchat", "tiktok",
"yt", "reddit", "tumblr", "pin", "wa", "wc")
# 🌈 Main interaction loop
repeat {
cat("\n🎮 Welcome to the EMA Explorer 🎮\n")
cat("Available platforms:\n")
cat(paste0(" - ", platforms, collapse = "\n"), "\n")
cat(" - all (see all platforms)\n")
platform_choice <- tolower(readline("📱 Which platform do you want to explore? (type 'exit' to quit): "))
if (platform_choice == "exit") break
if (!(platform_choice %in% platforms || platform_choice == "all")) {
cat("❌ Invalid choice. Try again.\n")
next
}
df <- all_data
# 🔍 Choose subset of data based on platform
if (platform_choice != "all") {
reason_cols <- df %>% select(starts_with(paste0(platform_choice, "_"))) %>%
select(-matches("cont_|act_")) %>% colnames()
content_cols <- df %>% select(starts_with(paste0(platform_choice, "_cont_"))) %>% colnames()
activity_cols <- df %>% select(starts_with(paste0(platform_choice, "_act_"))) %>% colnames()
mood_col <- paste0(platform_choice, "_mood")
mins_col <- paste0(platform_choice, "_mins")
} else {
reason_cols <- grep("_$", colnames(df), value = TRUE)
content_cols <- grep("_cont_", colnames(df), value = TRUE)
activity_cols <- grep("_act_", colnames(df), value = TRUE)
mood_col <- grep("_mood$", colnames(df), value = TRUE)
mins_col <- grep("_mins$", colnames(df), value = TRUE)
}
# 📊 Submenu
repeat {
cat("\nWhat would you like to do?\n")
cat("1. View reason/content/activity summaries\n")
cat("2. Plot mood and minutes\n")
cat("3. Run regression (e.g., mood ~ mins)\n")
cat("4. Back to platform menu\n")
choice <- readline("Select option (1–4): ")
if (choice == "1") {
cat("🔍 Frequency summaries:\n")
# Reason
if (length(reason_cols)) {
cat("\n--- Reasons ---\n")
df %>% select(all_of(reason_cols)) %>%
pivot_longer(everything()) %>%
filter(!is.na(value) & value != 0) %>%
count(name, value) %>% print(n = 20)
}
# Content
if (length(content_cols)) {
cat("\n--- Content ---\n")
df %>% select(all_of(content_cols)) %>%
pivot_longer(everything()) %>%
filter(!is.na(value) & value != 0) %>%
count(name, value) %>% print(n = 20)
}
# Activity
if (length(activity_cols)) {
cat("\n--- Activities ---\n")
df %>% select(all_of(activity_cols)) %>%
pivot_longer(everything()) %>%
filter(!is.na(value) & value != 0) %>%
count(name, value) %>% print(n = 20)
}
} else if (choice == "2") {
# 📈 Plotting mins and mood
if (mins_col %in% colnames(df)) {
print(
ggplot(df, aes(x = .data[[mins_col]])) +
geom_histogram(bins = 20, fill = "#4B9CD3", color = "white") +
labs(title = "Minutes Spent", x = "Minutes", y = "Frequency") )
} else {
cat("❌ Minutes column not found.\n")
}
if (mood_col %in% colnames(df)) {
print(
ggplot(df, aes(x = .data[[mood_col]])) +
geom_histogram(bins = 10, fill = "#D34B87", color = "white") +
labs(title = "Mood Distribution", x = "Mood", y = "Frequency")
)
} else {
cat("❌ Mood column not found.\n")
}
} else if (choice == "3") {
# 📉 Run regression
cat("Available numeric columns:\n")
numeric_cols <- df %>% select(where(is.numeric)) %>% colnames()
print(numeric_cols)
x_var <- readline("Choose predictor (x): ")
y_var <- readline("Choose outcome (y): ")
if (x_var %in% numeric_cols && y_var %in% numeric_cols) {
model <- lm(as.formula(paste(y_var, "~", x_var)), data = df)
cat("\n🧠 Regression summary:\n")
print(summary(model))
} else {
cat("❌ Invalid column names.\n")
}
} else if (choice == "4") {
break
} else {
cat("❌ Invalid option.\n")
}
}
}
clear
cat("👋 Goodbye!\n")
# 📁 Set your data directory
data_dir <- "/Users/andrewcardona/Desktop/CABLAB_CODE/EMA"
file_paths <- list.files(data_dir, pattern = "^cleaned_EMA.*\\.csv$", full.names = TRUE)
# 📦 Load required packages
library(tidyverse)
# 🪄 Load and combine all data
cat("🔄 Loading all EMA files...\n")
all_data <- file_paths %>%
map_dfr(read_csv, .id = "file_index")
# 🧠 Define platform list and mapping structure
platforms <- c("insta", "x", "fb", "snapchat", "tiktok",
"yt", "reddit", "tumblr", "pin", "wa", "wc")
# 🌈 Main interaction loop
repeat {
cat("\n🎮 Welcome to the EMA Explorer 🎮\n")
cat("Available platforms:\n")
cat(paste0(" - ", platforms, collapse = "\n"), "\n")
cat(" - all (see all platforms)\n")
platform_input <- readline("📱 Which platforms do you want to explore? (comma separated, or 'all', or 'exit' to quit): ")
platform_input <- tolower(trimws(platform_input))
if (platform_input == "exit") break
if (platform_input == "all") {
selected_platforms <- platforms
} else {
# Split input by comma and trim whitespace
selected_platforms <- unlist(strsplit(platform_input, ","))
selected_platforms <- trimws(selected_platforms)
# Validate
invalid_choices <- setdiff(selected_platforms, platforms)
if (length(invalid_choices) > 0) {
cat("❌ Invalid platform(s):", paste(invalid_choices, collapse = ", "), "\nTry again.\n")
next
}
}
df <- all_data
# 🔍 Choose columns based on selected platforms
if (!("all" %in% selected_platforms)) {
reason_cols <- unlist(lapply(selected_platforms, function(p) {
df %>% select(starts_with(paste0(p, "_"))) %>%
select(-matches("cont_|act_")) %>% colnames()
}))
content_cols <- unlist(lapply(selected_platforms, function(p) {
df %>% select(starts_with(paste0(p, "_cont_"))) %>% colnames()
}))
activity_cols <- unlist(lapply(selected_platforms, function(p) {
df %>% select(starts_with(paste0(p, "_act_"))) %>% colnames()
}))
mood_cols <- paste0(selected_platforms, "_mood")
mins_cols <- paste0(selected_platforms, "_mins")
} else {
reason_cols <- grep("_$", colnames(df), value = TRUE)
content_cols <- grep("_cont_", colnames(df), value = TRUE)
activity_cols <- grep("_act_", colnames(df), value = TRUE)
mood_cols <- grep("_mood$", colnames(df), value = TRUE)
mins_cols <- grep("_mins$", colnames(df), value = TRUE)
}
# 📊 Submenu
repeat {
cat("\nWhat would you like to do?\n")
cat("1. View reason/content/activity summaries\n")
cat("2. Plot mood and minutes\n")
cat("3. Run regression (e.g., mood ~ mins)\n")
cat("4. Back to platform menu\n")
choice <- readline("Select option (1–4): ")
if (choice == "1") {
cat("🔍 Frequency summaries:\n")
# Reason
if (length(reason_cols)) {
cat("\n--- Reasons ---\n")
df %>% select(all_of(reason_cols)) %>%
pivot_longer(everything()) %>%
filter(!is.na(value) & value != 0) %>%
count(name, value) %>% print(n = 20)
}
# Content
if (length(content_cols)) {
cat("\n--- Content ---\n")
df %>% select(all_of(content_cols)) %>%
pivot_longer(everything()) %>%
filter(!is.na(value) & value != 0) %>%
count(name, value) %>% print(n = 20)
}
# Activity
if (length(activity_cols)) {
cat("\n--- Activities ---\n")
df %>% select(all_of(activity_cols)) %>%
pivot_longer(everything()) %>%
filter(!is.na(value) & value != 0) %>%
count(name, value) %>% print(n = 20)
}
} else if (choice == "2") {
# 📈 Plotting mins and mood for all selected platforms
# Minutes plots
for (min_col in mins_cols) {
if (min_col %in% colnames(df)) {
print(
ggplot(df, aes(x = .data[[min_col]])) +
geom_histogram(bins = 20, fill = "#4B9CD3", color = "white") +
labs(title = paste("Minutes Spent -", min_col), x = "Minutes", y = "Frequency")
)
} else {
cat(paste0("❌ Minutes column not found: ", min_col, "\n"))
}
}
# Mood plots
for (m_col in mood_cols) {
if (m_col %in% colnames(df)) {
print(
ggplot(df, aes(x = .data[[m_col]])) +
geom_histogram(bins = 10, fill = "#D34B87", color = "white") +
labs(title = paste("Mood Distribution -", m_col), x = "Mood", y = "Frequency")
)
} else {
cat(paste0("❌ Mood column not found: ", m_col, "\n"))
}
}
} else if (choice == "3") {
# 📉 Run regression
cat("Available numeric columns:\n")
numeric_cols <- df %>% select(where(is.numeric)) %>% colnames()
print(numeric_cols)
x_var <- readline("Choose predictor (x): ")
y_var <- readline("Choose outcome (y): ")
if (x_var %in% numeric_cols && y_var %in% numeric_cols) {
model <- lm(as.formula(paste(y_var, "~", x_var)), data = df)
cat("\n🧠 Regression summary:\n")
print(summary(model))
} else {
cat("❌ Invalid column names.\n")
}
} else if (choice == "4") {
break
} else {
cat("❌ Invalid option.\n")
}
}
}
source("~/.active-rstudio-document", echo=TRUE)
shiny::runApp('Desktop/CABLAB_CODE/EMA/EMA_App')
shiny::runApp()
library(tidyverse)
library(stringr)
library(dplyr)
############---- CLEAN UP CREW -----####################
# Define the renaming function
rename_survey_block <- function(df, question_text, prefix) {
matching_cols <- colnames(df)[str_detect(str_to_lower(colnames(df)), str_to_lower(question_text))]
if (length(matching_cols) == 0) {
message(sprintf("No match found for: '%s'", question_text))
return(df)
}
clean_names <- str_extract(matching_cols, "(?<=\\(choice=).+?(?=\\))")
# Fallback for columns without (choice=...) format
clean_names[is.na(clean_names)] <- paste0("item", seq_len(sum(is.na(clean_names))))
new_names <- paste0(prefix, str_to_lower(str_replace_all(clean_names, "[^a-zA-Z0-9]", "_")))
# Rename matched columns
names(df)[match(matching_cols, names(df))] <- new_names
return(df)
}
# renaming minutes
rename_mins_columns <- function(df) {
mins_map <- c(
"Instagram" = "insta_mins",
"X \\(formerly Twitter\\)" = "x_mins",
"Facebook" = "fb_mins",
"Snapchat" = "snap_mins",
"TikTok" = "tiktok_mins",
"YouTube" = "yt_mins",
"Reddit" = "reddit_mins",
"Tumblr" = "tumblr_mins",
"Pinterest" = "pin_mins",
"WhatsApp" = "wa_mins",
"WeChat" = "wc_mins"
)
for (platform in names(mins_map)) {
col_to_rename <- grep(paste0("how many minutes did you spend on ", platform),
colnames(df), ignore.case = TRUE, value = TRUE)
if (length(col_to_rename) == 1) {
colnames(df)[which(colnames(df) == col_to_rename)] <- mins_map[[platform]]
}
}
return(df)
}
# renaming moods
rename_mood_cols <- function(df) {
# Create a named vector for the mapping
mood_map <- c(
"...5"   = "gen_mood",
"...21"  = "insta_mood",
"...67"  = "x_mood",
"...111" = "fb_mood",
"...159" = "snapchat_mood",
"...199" = "tiktok_mood",
"...244" = "yt_mood",
"...293" = "reddit_mood",
"...340" = "tumblr_mood",
"...382" = "pin_mood",
"...425" = "wa_mood",
"...464" = "wc_mood"
)
# Find which of these columns exist in the df
existing_cols <- intersect(names(mood_map), colnames(df))
# Rename the matching columns
colnames(df)[match(existing_cols, colnames(df))] <- mood_map[existing_cols]
return(df)
}
# Function to calculate participant-level scores
calculate_scores <- function(df) {
# Adjust PID and EMA column names if necessary:
if (!("PID" %in% colnames(df))) stop("PID column not found")
if (!("ema_id" %in% colnames(df))) stop("ema_id column not found")
# 1. Duration columns (minutes)
duration_cols <- c("insta_mins", "x_mins", "fb_mins", "snap_mins", "tiktok_mins",
"yt_mins", "reddit_mins", "tumblr_mins", "pin_mins", "wa_mins", "wc_mins")
duration_cols <- intersect(duration_cols, colnames(df))
# 2. Mood columns
mood_cols <- c("insta_mood", "x_mood", "fb_mood", "snapchat_mood", "tiktok_mood",
"yt_mood", "reddit_mood", "tumblr_mood", "pin_mood", "wa_mood", "wc_mood")
mood_cols <- intersect(mood_cols, colnames(df))
# Long format for durations
duration_long <- df %>%
select(PID, EMA = ema_id, all_of(duration_cols)) %>%
pivot_longer(cols = all_of(duration_cols), names_to = "app", values_to = "duration") %>%
mutate(app = str_remove(app, "_mins"))
# Long format for moods
mood_long <- df %>%
select(PID, EMA = ema_id, all_of(mood_cols)) %>%
pivot_longer(cols = all_of(mood_cols), names_to = "app", values_to = "mood") %>%
mutate(app = str_remove(app, "_mood"))
# Join duration and mood
combined <- left_join(duration_long, mood_long, by = c("PID", "EMA", "app"))
combined <- combined %>% filter(!is.na(duration), !is.na(mood), duration > 0)
# Mood during use per EMA
mood_during_use_ema <- combined %>%
group_by(PID, EMA) %>%
summarize(mood_weighted = sum(mood * duration) / sum(duration), .groups = "drop")
# Average mood during use per participant
mood_during_use <- mood_during_use_ema %>%
group_by(PID) %>%
summarize(Mood_During_Use_Score = mean(mood_weighted, na.rm = TRUE))
# Total phone use per EMA
total_use_ema <- combined %>%
group_by(PID, EMA) %>%
summarize(total_use = sum(duration), .groups = "drop")
# General mood (gen_mood) per EMA from original df
general_mood <- df %>% select(PID, EMA = ema_id, gen_mood)
# Join total use and general mood
use_mood <- left_join(total_use_ema, general_mood, by = c("PID", "EMA"))
# Correlation per participant (only if >1 EMA)
mood_use_assoc <- use_mood %>%
group_by(PID) %>%
summarize(Mood_Use_Association_Score = ifelse(n() > 1,
cor(total_use, gen_mood, use = "pairwise.complete.obs"),
NA_real_))
# Exposure to negative content - find columns with '_cont_' (binary)
neg_content_cols <- grep("_cont_", colnames(df), value = TRUE)
neg_content_df <- df %>%
select(PID, EMA = ema_id, all_of(neg_content_cols)) %>%
rowwise() %>%
mutate(any_neg = as.integer(any(c_across(all_of(neg_content_cols)) == 1))) %>%
ungroup() %>%
group_by(PID) %>%
summarize(Exposure_Negative_Score = mean(any_neg, na.rm = TRUE))
# Average total duration of use per participant
avg_total_duration <- total_use_ema %>%
group_by(PID) %>%
summarize(Avg_Total_Duration = mean(total_use, na.rm = TRUE))
# Combine all scores
participant_scores <- mood_during_use %>%
left_join(mood_use_assoc, by = "PID") %>%
left_join(neg_content_df, by = "PID") %>%
left_join(avg_total_duration, by = "PID")
return(participant_scores)
}
############## END FUNCTIONS ##############
# Folder containing CSVs
data_dir <- "/Users/andrewcardona/Desktop/CABLAB_CODE/EMA"  # update to your path
file_paths <- list.files(data_dir, pattern = "\\.csv$", full.names = TRUE)
# Process each file
renamed_dfs <- lapply(file_paths, function(path) {
df <- read_csv(path)
# Your renaming blocks
df <- rename_survey_block(df, "Which of the following social media applications", "sm_")
df <- rename_survey_block(df, "why did you go on instagram", "insta_")
df <- rename_survey_block(df, "instagram in the last hour", "insta_cont_")
df <- rename_survey_block(df, "when you went on instagram, which of the following activities", "insta_act_")
df <- rename_survey_block(df, "why did you go on x", "x_")
df <- rename_survey_block(df, "x in the last hour", "x_cont_")
df <- rename_survey_block(df, "when you went on x, which of the following activities", "x_act_")
df <- rename_survey_block(df, "facebook in the last hour", "fb_cont_")
df <- rename_survey_block(df, "when you went on facebook, which of the following activities", "fb_act_")
df <- rename_survey_block(df, "why did you go on facebook", "fb_")
df <- rename_survey_block(df, "why did you go on snapchat", "snapchat_")
df <- rename_survey_block(df, "snapchat in the last hour", "snapchat_content_")
df <- rename_survey_block(df, "when you went on snapchat, which of the following activities", "snapchat_act_")
df <- rename_survey_block(df, "why did you go on tiktok", "tiktok_")
df <- rename_survey_block(df, "tiktok in the last hour", "tiktok_cont_")
df <- rename_survey_block(df, "when you went on tiktok, which of the following activities", "tiktok_act_")
df <- rename_survey_block(df, "why did you go on youtube", "yt_")
df <- rename_survey_block(df, "youtube in the last hour", "yt_cont_")
df <- rename_survey_block(df, "when you went on youtube, which of the following activities", "yt_act_")
df <- rename_survey_block(df, "why did you go on reddit", "reddit_")
df <- rename_survey_block(df, "reddit in the last hour", "reddit_cont_")
df <- rename_survey_block(df, "when you went on reddit, which of the following activities", "reddit_act_")
df <- rename_survey_block(df, "why did you go on tumblr", "tumblr_")
df <- rename_survey_block(df, "tumblr in the last hour", "tumblr_cont_")
df <- rename_survey_block(df, "when you went on tumblr, which of the following activities", "tumblr_act_")
df <- rename_survey_block(df, "why did you go on pinterest", "pin_")
df <- rename_survey_block(df, "pinterest in the last hour", "pin_cont_")
df <- rename_survey_block(df, "when you went on pinterest, which of the following activities", "pin_act_")
df <- rename_survey_block(df, "why did you go on whatsapp", "wa_")
df <- rename_survey_block(df, "whatsapp in the last hour", "wa_cont_")
df <- rename_survey_block(df, "when you went on whatsapp, which of the following activities", "wa_act_")
df <- rename_survey_block(df, "why did you go on wechat", "wc_")
df <- rename_survey_block(df, "wechat in the last hour", "wc_cont_")
df <- rename_survey_block(df, "when you went on wechat, which of the following activities", "wc_act_")
# renaming mins
df <- rename_mins_columns(df)
# renaming moods
df <- rename_mood_cols(df)
# convert Checked/Unchecked to 1/0 for all applicable columns
df[] <- lapply(df, function(col) {
if (is.character(col) && all(na.omit(col) %in% c("Checked", "Unchecked"))) {
return(ifelse(col == "Checked", 1, 0))
} else {
return(col)
}
})
return(df)
})
# Loop through each cleaned df to calculate scores and save files
for (i in seq_along(renamed_dfs)) {
df <- renamed_dfs[[i]]
# Calculate participant-level scores
scores <- calculate_scores(df)
# Extract EMA number from filename
ema_num <- str_extract(basename(file_paths[i]), "EMA\\d+")
# Write cleaned individual EMA file
new_filename <- paste0("cleaned_", ema_num, ".csv")
write_csv(df, file.path(data_dir, new_filename))
# Write participant-level summary scores file
scores_filename <- paste0("participant_scores_", ema_num, ".csv")
write_csv(scores, file.path(data_dir, scores_filename))
}
